# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
          
      - name: Use Secret
        run: |
          echo "Using API URL ${{ secrets.API_URL }}"
          echo "Using Token ${{ secrets.API_TOKEN }}"
        
      - name: Replace environment variables
        run: |
          sed -i "s|__API_URL__|${{ secrets.API_URL }}|g" ./projects.js
          sed -i "s|__MY_TOKEN__|${{ secrets.MY_TOKEN }}|g" ./projects.js

      - name: Debug after replacement
        run: |
          echo "Displaying the contents of the script to verify replacement"
          cat ./projects.js
          grep -C 2 '__API_URL__' ./projects.js || echo "API_URL replacement successful"
          grep -C 2 '__MY_TOKEN__' ./projects.js || echo "MY_TOKEN replacement successful"  
            
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
